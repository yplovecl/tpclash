version: '3'

dotenv: ['.env', '{{.HOME}}/.user.secret']

vars:
  VERSION:
    sh: git describe --tags --always
  COMMIT_SHA:
    sh: git rev-parse HEAD
  BUILD_DATE:
    sh: date '+%F %T'
  META_VERSION:
    sh: |
      curl -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.name'
  META_DASHBOARD_VERSION:
    sh: |
      curl -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/MetaCubeX/metacubexd/releases/latest | jq -r '.name'
tasks:
  clean:
    desc: Clean Up Build Cache Files
    cmds:
      - rm -rf build static
  mkdir:
    desc: Create Build Dir
    cmds:
      - mkdir -p build static/ruleset
    status:
      - test -d build
      - test -d static/ruleset
  download-ruleset:
    desc: Download Loyalsoldier RuleSet
    cmds:
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt > static/ruleset/reject.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt > static/ruleset/icloud.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt > static/ruleset/apple.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt > static/ruleset/google.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt > static/ruleset/proxy.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt > static/ruleset/direct.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt > static/ruleset/private.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt > static/ruleset/gfw.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt > static/ruleset/tld-not-cn.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt > static/ruleset/telegramcidr.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt > static/ruleset/cncidr.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt > static/ruleset/lancidr.yaml
      - curl -sSL https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt > static/ruleset/applications.yaml
    status:
      - test -f static/ruleset/reject.yaml
      - test -f static/ruleset/icloud.yaml
      - test -f static/ruleset/apple.yaml
      - test -f static/ruleset/google.yaml
      - test -f static/ruleset/proxy.yaml
      - test -f static/ruleset/direct.yaml
      - test -f static/ruleset/private.yaml
      - test -f static/ruleset/gfw.yaml
      - test -f static/ruleset/tld-not-cn.yaml
      - test -f static/ruleset/telegramcidr.yaml
      - test -f static/ruleset/cncidr.yaml
      - test -f static/ruleset/lancidr.yaml
      - test -f static/ruleset/applications.yaml

  download-mmdb:
    desc: Download GeoIP2-CN MMDB
    cmds:
      - curl -sSL https://cdn.jsdelivr.net/gh/Hackl0us/GeoIP2-CN@release/Country.mmdb > static/Country.mmdb
    status:
      - test -f static/Country.mmdb

  copy-tracing:
    desc: Copy Tracing Dashboard Config
    cmds:
      - cp -r tracing static/tracing
    status:
      - test -d static/tracing

  download-dashboard:
    desc: Download Clash Meta Dashboard
    cmds:
      - curl -sSL https://github.com/MetaCubeX/metacubexd/archive/gh-pages.zip > build/dashboard.zip
      - defer: rm -f build/dashboard.zip
      - unzip build/dashboard.zip -d build 1>/dev/null
      - mv build/metacubexd-gh-pages static/official
    status:
      - test -d static/official

  download-clash:
    desc: Download Clash Meta
    vars:
      CLASH_META_URL:
        sh: |
          curl -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
            https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | \
            jq -r '.assets[].browser_download_url | select (. | test("mihomo-{{.PLATFORM}}-v\\d+.*gz"))'
    cmds:
      - curl -sSL {{.CLASH_META_URL}} > build/mihomo-{{.PLATFORM}}.gz
      - gzip -d build/mihomo-{{.PLATFORM}}.gz
      - chmod +x build/mihomo-{{.PLATFORM}}
    status:
      - test -f build/mihomo-{{.PLATFORM}}

  copy-clash:
    desc: Copy Clash Meta To Embed FS
    cmds:
      - task: download-clash
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - cp -f build/mihomo-{{.PLATFORM}} static/xclash

  build-tpclash:
    desc: Build TPClash With Clash Meta
    label: build-{{.PLATFORM}}
    cmds:
      - task: mkdir
      - task: download-ruleset
      - task: download-mmdb
      - task: download-dashboard
      - task: download-clash
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - task: copy-clash
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - |
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} GOARM={{.GOARM}} GOAMD64={{.GOAMD64}} GOMIPS={{.GOMIPS}} \
        go build -trimpath -o build/tpclash-{{.GOOS}}-{{.GOARCH}}{{if .GOAMD64}}-{{.GOAMD64}}{{end}} \
          -ldflags "{{if not .DEBUG}}-w -s{{end}} \
          -X 'main.build={{.BUILD_DATE}}' \
          -X 'main.commit={{.COMMIT_SHA}}' \
          -X 'main.version={{.VERSION}}' \
          -X 'main.clash=Meta {{.META_VERSION}}'" \
          {{if .DEBUG}}-gcflags "all=-N -l"{{end}}


  linux-386:
    desc: Build TPClash With Clash Meta(linux/386)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-386,
          GOOS: linux,
          GOARCH: 386,
        }
  linux-amd64:
    desc: Build TPClash With Clash Meta(linux/amd64)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-amd64-compatible,
          GOOS: linux,
          GOARCH: amd64,
        }
  linux-amd64-v3:
    desc: Build TPClash With Clash Meta(linux/amd64-v3)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-amd64,
          GOOS: linux,
          GOARCH: amd64,
          GOAMD64: v3
        }
  linux-arm64:
    desc: Build TPClash With Clash Meta(linux/arm64)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-arm64,
          GOOS: linux,
          GOARCH: arm64
        }
  linux-armv5:
    desc: Build TPClash With Clash Meta(linux/armv5)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-armv5,
          GOOS: linux,
          GOARCH: arm,
          GOARM: 5
        }
  linux-armv6:
    desc: Build TPClash With Clash Meta(linux/armv6)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-armv6,
          GOOS: linux,
          GOARCH: arm,
          GOARM: 6
        }
  linux-armv7:
    desc: Build TPClash With Clash Meta(linux/armv7)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-armv7,
          GOOS: linux,
          GOARCH: arm,
          GOARM: 7
        }
  linux-mips-hardfloat:
    desc: Build TPClash With Clash Meta(linux/mips-hardfloat)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-mips-hardfloat,
          GOOS: linux,
          GOARCH: mips,
          GOMIPS: hardfloat
        }
  linux-mipsle-softfloat:
    desc: Build TPClash With Clash Meta(linux/mipsle-softfloat)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-mipsle-softfloat,
          GOOS: linux,
          GOARCH: mipsle,
          GOMIPS: softfloat
        }
  linux-mipsle-hardfloat:
    desc: Build TPClash With Clash Meta(linux/mipsle-hardfloat)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-mipsle-hardfloat,
          GOOS: linux,
          GOARCH: mipsle,
          GOMIPS: hardfloat
        }
  linux-mips64:
    desc: Build TPClash With Clash Meta(linux/mips64)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-mips64,
          GOOS: linux,
          GOARCH: mips64
        }
  linux-mips64le:
    desc: Build TPClash With Clash Meta(linux/mips64le)
    cmds:
      - task: build-tpclash
        vars: {
          PLATFORM: linux-mips64le,
          GOOS: linux,
          GOARCH: mips64le
        }

  default:
    cmds:
      - task: clean
      - task: linux-386
      - task: linux-amd64
      - task: linux-amd64-v3
      - task: linux-arm64
      - rm -rf static build/mihomo-*
      - cp flatcar.butane.yaml example.yaml build
